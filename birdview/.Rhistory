source('C:/Users/mikej/Documents/metrohack/p.R')
las_roi@data$X
las_roi@data$X[1]
las_roi@data$X[2]
las_roi@data$X[2:50]
las_roi@data$X[2:50] %%1==0
las_roi@data$X[2:50] %%1
printf("%f", las_roi@data$[1])
sprintf("%f", las_roi@data$[1])
sprintf("%f", las_roi@data$X[1])
source('C:/Users/mikej/Documents/metrohack/p.R')
las_roi@data$X
source('C:/Users/mikej/Documents/metrohack/p.R')
source('C:/Users/mikej/Documents/metrohack/p.R')
source('C:/Users/mikej/Documents/metrohack/p.R')
plot(chm6)
las_roi@data$X
las_roi@data$Y
source('C:/Users/mikej/Documents/metrohack/p.R')
source('C:/Users/mikej/Documents/metrohack/p.R')
las_clip@data$X
writeLAS(las_roi, "las_roi.las")
writeLAS(las_clip, "las_clip.las")
source('C:/Users/mikej/Documents/metrohack/p.R')
las_roi@data$X
source('C:/Users/mikej/Documents/metrohack/p.R')
writeLAS(las_clip, "las_clip.las")
lastrees_silva(las, chm, treetops, max_cr_factor = 0.6, exclusion = 0.3, extra = FALSE)
source('C:/Users/mikej/Documents/metrohack/p.R')
chm = grid_tincanopy(las_clip, 0.25, c(0,2,5,10,15), c(0,1) , subcircle = 0.2)
#plot(chm6)
treetops = tree_detection(las_clip, 50, hmin=100)
lastrees_silva(las_clip, chm, treetops, max_cr_factor = 0.6, exclusion = 0.3, extra = FALSE)
lastrees_dalponte(las_clip, chm, treetops)
plot(las_clip, color = "treeID", colorPalette = col)
chm = as.raster(chm)
#plot(chm6)
treetops = tree_detection(las_clip, 50, hmin=100)
lastrees_dalponte(las_clip, chm, treetops)
plot(las_clip, color = "treeID", colorPalette = col)
chm = grid_tincanopy(las_clip, 0.25, c(0,2,5,10,15), c(0,1) , subcircle = 0.2)
#plot(chm)
chm = as.raster(chm)
kernel = matrix(1,3,3)
chm = raster::focal(chm, w = kernel, fun = median, na.rm = TRUE)
treetops = tree_detection(las_clip, 50, hmin=100)
lastrees_dalponte(las_clip, chm, treetops)
plot(las_clip, color = "treeID", colorPalette = col)
las_clip@data$Classification
writeLAS(las_clip, "las_trees.las")
las_clip@data$treeID
las_trees = lasfilter(las_clip, treeID !- NA)
las_trees = lasfilter(las_clip, treeID != NA)
las_trees = lasfilter(las_clip, treeID == 1)
las_clip@data$treeID[1]
NA
"NA"
las_trees = lasfilter(las_clip, treeID != "NA")
las_trees = lasfilter(las_clip, treeID != "NA")
las_trees
las_trees@data$treeID
writeLAS(las_trees, "las_trees.las")
plot(las_clip, color = "treeID", colorPalette = col)
plot(las_clip, color = "treeID")#, colorPalette = col)
plot(las_clip, color = "treeID")
plot(treetops)
chm = grid_tincanopy(las_clip, 0.25, c(0,2,5,10,15), c(0,1) , subcircle = 0.2)
chm = as.raster(chm)
plot(chm)
chm
chm@data@values
plot(chm@data@values)
chm = raster::focal(chm, w = kernel, fun = median, na.rm = TRUE)
source('C:/Users/mikej/Documents/metrohack/p.R')
raster::plot(chm, col = height.colors(30))
raster::plot(ttops, add = TRUE, col = "black", legend = FALSE)
raster::plot(treetops, add = TRUE, col = "black", legend = FALSE)
raster::plot(chm, col = height.colors(30))
raster::plot(treetops)
raster::plot(treetops, add = TRUE, col = "black", legend = FALSE)
plot(las_clip, color="treeID")
las_clip@data$Z
treetops = tree_detection(las_clip, 7, hmin=100) #treetops very innacurate
lastrees_dalponte(las_clip, chm, treetops)
plot(treetops)
plot(las_clip)
writeLAS(las_clip, "las_trees")
writeLAS(las_clip, "las_trees.las")
test = las_clip
test@data$Classification <- test@data$treeID
writeLAS(test, "tree_test.las")
plot(las_clip)
plot(las_roi)
las_clip@data$Classification
las_clip@data$treeID
install.packages("ggmap")
shiny::runApp('birdview')
runApp('birdview')
runApp('birdview')
runApp('birdview')
runApp('birdview')
library(ggmap)
runApp('birdview')
myLoc <- c(130, 30, -105, 50)
myMapType <- "roadmap"
mymap <- get_map(location=myLoc, source="google", maptype=myMapType)
mymap <- get_map(location=myLoc, source="google", maptype=myMapType, crop=FALSE)
myLoc
mymap <- get_map(location=myLoc, source="stamen", matype="watercolor", crop=FALSE)
mymap <- get_map(location=myLoc, source="stamen", maptype="watercolor", crop=FALSE)
mymap <- get_map(location=myLoc, source="stamen", maptype="watercolor", crop=FALSE, zoom=4)
ggmap(myMap)
ggmap(mymap)
myLoc <- c(lon=41.490700, lat=-81.737632)
myMapType <- "roadmap"
mymap <- get_map(location=myLoc, source="google", maptype=myMapType, crop=False, zoom=13)
ggmap(mymap)
myLoc <- c(lon=41.490700, lat=-81.737632)
myMapType <- "roadmap"
mymap <- get_map(location=myLoc, source="google", maptype=myMapType, zoom=13)
ggmap(mymap)
myLoc <- c(lon=41.490700, lat=-81.737632)
myMapType <- "roadmap"
mymap <- get_map(location=myLoc, source="google", maptype="roadmap", zoom=13)
ggmap(map)
ggmap(mymap)
myLoc
myLoc <- c(lon=41.490700, lat=-81.737632)
myMapType <- "roadmap"
mymap <- get_map(location=myLoc, source="google", maptype="terrain", zoom=13)
ggmap(mymap)
lat <- c(12.9,13.05)
long <- c(77.52,77.7)
bbox <- make_bbox(long,lat,f=0.05)
map <- get_map(bbox, maptype="roadmap", source="google")
ggmap(map)
lat <- c(12.9,13.05)
long <- c(77.52,77.7)
region <- make_bbox(long,lat,f=0.05)
myMapType <- "terrain"
mymap <- get_map(location=region, source="google", maptype=myMapType)
ggmap(mymap)
runApp('birdview')
output$distPlot <- renderPlot({
ggmap(map)
# x    <- faithful$waiting
# bins <- seq(min(x), max(x), length.out = input$bins + 1)
#
# hist(x, breaks = bins, col = "#75AADB", border = "white",
#      xlab = "Waiting time to next eruption (in mins)",
#      main = "Histogram of waiting times")
})
runApp('metrohack/birdview')
seq(3,5, lengthou.out = 5)
runApp('metrohack/birdview')
